// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as flowsModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (instance.constructor as typeof protobuf.Message).toObject(
    instance as protobuf.Message<T>,
    {defaults: true}
  );
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v3beta1.FlowsClient', () => {
  it('has servicePath', () => {
    const servicePath = flowsModule.v3beta1.FlowsClient.servicePath;
    assert(servicePath);
  });

  it('has apiEndpoint', () => {
    const apiEndpoint = flowsModule.v3beta1.FlowsClient.apiEndpoint;
    assert(apiEndpoint);
  });

  it('has port', () => {
    const port = flowsModule.v3beta1.FlowsClient.port;
    assert(port);
    assert(typeof port === 'number');
  });

  it('should create a client with no option', () => {
    const client = new flowsModule.v3beta1.FlowsClient();
    assert(client);
  });

  it('should create a client with gRPC fallback', () => {
    const client = new flowsModule.v3beta1.FlowsClient({
      fallback: true,
    });
    assert(client);
  });

  it('has initialize method and supports deferred initialization', async () => {
    const client = new flowsModule.v3beta1.FlowsClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    assert.strictEqual(client.flowsStub, undefined);
    await client.initialize();
    assert(client.flowsStub);
  });

  it('has close method', () => {
    const client = new flowsModule.v3beta1.FlowsClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.close();
  });

  it('has getProjectId method', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new flowsModule.v3beta1.FlowsClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
    const result = await client.getProjectId();
    assert.strictEqual(result, fakeProjectId);
    assert((client.auth.getProjectId as SinonStub).calledWithExactly());
  });

  it('has getProjectId method with callback', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new flowsModule.v3beta1.FlowsClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon
      .stub()
      .callsArgWith(0, null, fakeProjectId);
    const promise = new Promise((resolve, reject) => {
      client.getProjectId((err?: Error | null, projectId?: string | null) => {
        if (err) {
          reject(err);
        } else {
          resolve(projectId);
        }
      });
    });
    const result = await promise;
    assert.strictEqual(result, fakeProjectId);
  });

  describe('createFlow', () => {
    it('invokes createFlow without error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.CreateFlowRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
      );
      client.innerApiCalls.createFlow = stubSimpleCall(expectedResponse);
      const [response] = await client.createFlow(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createFlow without error using callback', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.CreateFlowRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
      );
      client.innerApiCalls.createFlow = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.createFlow(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dialogflow.cx.v3beta1.IFlow | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createFlow with error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.CreateFlowRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createFlow = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createFlow(request), expectedError);
      assert(
        (client.innerApiCalls.createFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('deleteFlow', () => {
    it('invokes deleteFlow without error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.DeleteFlowRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteFlow = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteFlow(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteFlow without error using callback', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.DeleteFlowRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteFlow = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.deleteFlow(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes deleteFlow with error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.DeleteFlowRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteFlow = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteFlow(request), expectedError);
      assert(
        (client.innerApiCalls.deleteFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('getFlow', () => {
    it('invokes getFlow without error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.GetFlowRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
      );
      client.innerApiCalls.getFlow = stubSimpleCall(expectedResponse);
      const [response] = await client.getFlow(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getFlow without error using callback', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.GetFlowRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
      );
      client.innerApiCalls.getFlow = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.getFlow(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dialogflow.cx.v3beta1.IFlow | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getFlow with error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.GetFlowRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getFlow = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getFlow(request), expectedError);
      assert(
        (client.innerApiCalls.getFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('updateFlow', () => {
    it('invokes updateFlow without error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.UpdateFlowRequest()
      );
      request.flow = {};
      request.flow.name = '';
      const expectedHeaderRequestParams = 'flow.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
      );
      client.innerApiCalls.updateFlow = stubSimpleCall(expectedResponse);
      const [response] = await client.updateFlow(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateFlow without error using callback', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.UpdateFlowRequest()
      );
      request.flow = {};
      request.flow.name = '';
      const expectedHeaderRequestParams = 'flow.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
      );
      client.innerApiCalls.updateFlow = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.updateFlow(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dialogflow.cx.v3beta1.IFlow | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes updateFlow with error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.UpdateFlowRequest()
      );
      request.flow = {};
      request.flow.name = '';
      const expectedHeaderRequestParams = 'flow.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateFlow = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateFlow(request), expectedError);
      assert(
        (client.innerApiCalls.updateFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('trainFlow', () => {
    it('invokes trainFlow without error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.TrainFlowRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.trainFlow = stubLongRunningCall(expectedResponse);
      const [operation] = await client.trainFlow(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.trainFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes trainFlow without error using callback', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.TrainFlowRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.trainFlow = stubLongRunningCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.trainFlow(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.protobuf.IStruct
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IStruct
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.trainFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes trainFlow with call error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.TrainFlowRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.trainFlow = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.trainFlow(request), expectedError);
      assert(
        (client.innerApiCalls.trainFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes trainFlow with LRO error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.TrainFlowRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.trainFlow = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.trainFlow(request);
      await assert.rejects(operation.promise(), expectedError);
      assert(
        (client.innerApiCalls.trainFlow as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes checkTrainFlowProgress without error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkTrainFlowProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkTrainFlowProgress with error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkTrainFlowProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listFlows', () => {
    it('invokes listFlows without error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.ListFlowsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
        ),
        generateSampleMessage(
          new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
        ),
        generateSampleMessage(
          new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
        ),
      ];
      client.innerApiCalls.listFlows = stubSimpleCall(expectedResponse);
      const [response] = await client.listFlows(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listFlows as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listFlows without error using callback', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.ListFlowsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
        ),
        generateSampleMessage(
          new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
        ),
        generateSampleMessage(
          new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
        ),
      ];
      client.innerApiCalls.listFlows = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.listFlows(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dialogflow.cx.v3beta1.IFlow[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listFlows as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listFlows with error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.ListFlowsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listFlows = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.listFlows(request), expectedError);
      assert(
        (client.innerApiCalls.listFlows as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listFlowsStream without error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.ListFlowsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
        ),
        generateSampleMessage(
          new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
        ),
        generateSampleMessage(
          new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
        ),
      ];
      client.descriptors.page.listFlows.createStream = stubPageStreamingCall(
        expectedResponse
      );
      const stream = client.listFlowsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dialogflow.cx.v3beta1.Flow[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.dialogflow.cx.v3beta1.Flow) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listFlows.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listFlows, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listFlows.createStream as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('invokes listFlowsStream with error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.ListFlowsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listFlows.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listFlowsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dialogflow.cx.v3beta1.Flow[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.dialogflow.cx.v3beta1.Flow) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listFlows.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listFlows, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listFlows.createStream as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listFlows without error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.ListFlowsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
        ),
        generateSampleMessage(
          new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
        ),
        generateSampleMessage(
          new protos.google.cloud.dialogflow.cx.v3beta1.Flow()
        ),
      ];
      client.descriptors.page.listFlows.asyncIterate = stubAsyncIterationCall(
        expectedResponse
      );
      const responses: protos.google.cloud.dialogflow.cx.v3beta1.IFlow[] = [];
      const iterable = client.listFlowsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listFlows.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listFlows.asyncIterate as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listFlows with error', async () => {
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dialogflow.cx.v3beta1.ListFlowsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listFlows.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listFlowsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.dialogflow.cx.v3beta1.IFlow[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listFlows.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listFlows.asyncIterate as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });
  });

  describe('Path templates', () => {
    describe('agent', () => {
      const fakePath = '/rendered/path/agent';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        agent: 'agentValue',
      };
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.agentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.agentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('agentPath', () => {
        const result = client.agentPath(
          'projectValue',
          'locationValue',
          'agentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.agentPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAgentName', () => {
        const result = client.matchProjectFromAgentName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.agentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAgentName', () => {
        const result = client.matchLocationFromAgentName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.agentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAgentFromAgentName', () => {
        const result = client.matchAgentFromAgentName(fakePath);
        assert.strictEqual(result, 'agentValue');
        assert(
          (client.pathTemplates.agentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('entityType', () => {
      const fakePath = '/rendered/path/entityType';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        agent: 'agentValue',
        entity_type: 'entityTypeValue',
      };
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.entityTypePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.entityTypePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('entityTypePath', () => {
        const result = client.entityTypePath(
          'projectValue',
          'locationValue',
          'agentValue',
          'entityTypeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.entityTypePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEntityTypeName', () => {
        const result = client.matchProjectFromEntityTypeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.entityTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEntityTypeName', () => {
        const result = client.matchLocationFromEntityTypeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.entityTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAgentFromEntityTypeName', () => {
        const result = client.matchAgentFromEntityTypeName(fakePath);
        assert.strictEqual(result, 'agentValue');
        assert(
          (client.pathTemplates.entityTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntityTypeFromEntityTypeName', () => {
        const result = client.matchEntityTypeFromEntityTypeName(fakePath);
        assert.strictEqual(result, 'entityTypeValue');
        assert(
          (client.pathTemplates.entityTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('environment', () => {
      const fakePath = '/rendered/path/environment';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        agent: 'agentValue',
        environment: 'environmentValue',
      };
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.environmentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.environmentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('environmentPath', () => {
        const result = client.environmentPath(
          'projectValue',
          'locationValue',
          'agentValue',
          'environmentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.environmentPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEnvironmentName', () => {
        const result = client.matchProjectFromEnvironmentName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.environmentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEnvironmentName', () => {
        const result = client.matchLocationFromEnvironmentName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.environmentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAgentFromEnvironmentName', () => {
        const result = client.matchAgentFromEnvironmentName(fakePath);
        assert.strictEqual(result, 'agentValue');
        assert(
          (client.pathTemplates.environmentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEnvironmentFromEnvironmentName', () => {
        const result = client.matchEnvironmentFromEnvironmentName(fakePath);
        assert.strictEqual(result, 'environmentValue');
        assert(
          (client.pathTemplates.environmentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('flow', () => {
      const fakePath = '/rendered/path/flow';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        agent: 'agentValue',
        flow: 'flowValue',
      };
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.flowPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.flowPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('flowPath', () => {
        const result = client.flowPath(
          'projectValue',
          'locationValue',
          'agentValue',
          'flowValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.flowPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromFlowName', () => {
        const result = client.matchProjectFromFlowName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.flowPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromFlowName', () => {
        const result = client.matchLocationFromFlowName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.flowPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAgentFromFlowName', () => {
        const result = client.matchAgentFromFlowName(fakePath);
        assert.strictEqual(result, 'agentValue');
        assert(
          (client.pathTemplates.flowPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFlowFromFlowName', () => {
        const result = client.matchFlowFromFlowName(fakePath);
        assert.strictEqual(result, 'flowValue');
        assert(
          (client.pathTemplates.flowPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('intent', () => {
      const fakePath = '/rendered/path/intent';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        agent: 'agentValue',
        intent: 'intentValue',
      };
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.intentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.intentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('intentPath', () => {
        const result = client.intentPath(
          'projectValue',
          'locationValue',
          'agentValue',
          'intentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.intentPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromIntentName', () => {
        const result = client.matchProjectFromIntentName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.intentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromIntentName', () => {
        const result = client.matchLocationFromIntentName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.intentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAgentFromIntentName', () => {
        const result = client.matchAgentFromIntentName(fakePath);
        assert.strictEqual(result, 'agentValue');
        assert(
          (client.pathTemplates.intentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchIntentFromIntentName', () => {
        const result = client.matchIntentFromIntentName(fakePath);
        assert.strictEqual(result, 'intentValue');
        assert(
          (client.pathTemplates.intentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('page', () => {
      const fakePath = '/rendered/path/page';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        agent: 'agentValue',
        flow: 'flowValue',
        page: 'pageValue',
      };
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.pagePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.pagePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('pagePath', () => {
        const result = client.pagePath(
          'projectValue',
          'locationValue',
          'agentValue',
          'flowValue',
          'pageValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.pagePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromPageName', () => {
        const result = client.matchProjectFromPageName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.pagePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromPageName', () => {
        const result = client.matchLocationFromPageName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.pagePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAgentFromPageName', () => {
        const result = client.matchAgentFromPageName(fakePath);
        assert.strictEqual(result, 'agentValue');
        assert(
          (client.pathTemplates.pagePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFlowFromPageName', () => {
        const result = client.matchFlowFromPageName(fakePath);
        assert.strictEqual(result, 'flowValue');
        assert(
          (client.pathTemplates.pagePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPageFromPageName', () => {
        const result = client.matchPageFromPageName(fakePath);
        assert.strictEqual(result, 'pageValue');
        assert(
          (client.pathTemplates.pagePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationAgentEnvironmentSessionEntityType', () => {
      const fakePath =
        '/rendered/path/projectLocationAgentEnvironmentSessionEntityType';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        agent: 'agentValue',
        environment: 'environmentValue',
        session: 'sessionValue',
        entity_type: 'entityTypeValue',
      };
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectLocationAgentEnvironmentSessionEntityTypePath', () => {
        const result = client.projectLocationAgentEnvironmentSessionEntityTypePath(
          'projectValue',
          'locationValue',
          'agentValue',
          'environmentValue',
          'sessionValue',
          'entityTypeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates
            .projectLocationAgentEnvironmentSessionEntityTypePathTemplate
            .render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationAgentEnvironmentSessionEntityTypeName', () => {
        const result = client.matchProjectFromProjectLocationAgentEnvironmentSessionEntityTypeName(
          fakePath
        );
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates
            .projectLocationAgentEnvironmentSessionEntityTypePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationAgentEnvironmentSessionEntityTypeName', () => {
        const result = client.matchLocationFromProjectLocationAgentEnvironmentSessionEntityTypeName(
          fakePath
        );
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates
            .projectLocationAgentEnvironmentSessionEntityTypePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAgentFromProjectLocationAgentEnvironmentSessionEntityTypeName', () => {
        const result = client.matchAgentFromProjectLocationAgentEnvironmentSessionEntityTypeName(
          fakePath
        );
        assert.strictEqual(result, 'agentValue');
        assert(
          (client.pathTemplates
            .projectLocationAgentEnvironmentSessionEntityTypePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEnvironmentFromProjectLocationAgentEnvironmentSessionEntityTypeName', () => {
        const result = client.matchEnvironmentFromProjectLocationAgentEnvironmentSessionEntityTypeName(
          fakePath
        );
        assert.strictEqual(result, 'environmentValue');
        assert(
          (client.pathTemplates
            .projectLocationAgentEnvironmentSessionEntityTypePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSessionFromProjectLocationAgentEnvironmentSessionEntityTypeName', () => {
        const result = client.matchSessionFromProjectLocationAgentEnvironmentSessionEntityTypeName(
          fakePath
        );
        assert.strictEqual(result, 'sessionValue');
        assert(
          (client.pathTemplates
            .projectLocationAgentEnvironmentSessionEntityTypePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntityTypeFromProjectLocationAgentEnvironmentSessionEntityTypeName', () => {
        const result = client.matchEntityTypeFromProjectLocationAgentEnvironmentSessionEntityTypeName(
          fakePath
        );
        assert.strictEqual(result, 'entityTypeValue');
        assert(
          (client.pathTemplates
            .projectLocationAgentEnvironmentSessionEntityTypePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationAgentSessionEntityType', () => {
      const fakePath = '/rendered/path/projectLocationAgentSessionEntityType';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        agent: 'agentValue',
        session: 'sessionValue',
        entity_type: 'entityTypeValue',
      };
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectLocationAgentSessionEntityTypePath', () => {
        const result = client.projectLocationAgentSessionEntityTypePath(
          'projectValue',
          'locationValue',
          'agentValue',
          'sessionValue',
          'entityTypeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates
            .projectLocationAgentSessionEntityTypePathTemplate
            .render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationAgentSessionEntityTypeName', () => {
        const result = client.matchProjectFromProjectLocationAgentSessionEntityTypeName(
          fakePath
        );
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates
            .projectLocationAgentSessionEntityTypePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationAgentSessionEntityTypeName', () => {
        const result = client.matchLocationFromProjectLocationAgentSessionEntityTypeName(
          fakePath
        );
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates
            .projectLocationAgentSessionEntityTypePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAgentFromProjectLocationAgentSessionEntityTypeName', () => {
        const result = client.matchAgentFromProjectLocationAgentSessionEntityTypeName(
          fakePath
        );
        assert.strictEqual(result, 'agentValue');
        assert(
          (client.pathTemplates
            .projectLocationAgentSessionEntityTypePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSessionFromProjectLocationAgentSessionEntityTypeName', () => {
        const result = client.matchSessionFromProjectLocationAgentSessionEntityTypeName(
          fakePath
        );
        assert.strictEqual(result, 'sessionValue');
        assert(
          (client.pathTemplates
            .projectLocationAgentSessionEntityTypePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntityTypeFromProjectLocationAgentSessionEntityTypeName', () => {
        const result = client.matchEntityTypeFromProjectLocationAgentSessionEntityTypeName(
          fakePath
        );
        assert.strictEqual(result, 'entityTypeValue');
        assert(
          (client.pathTemplates
            .projectLocationAgentSessionEntityTypePathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('securitySettings', () => {
      const fakePath = '/rendered/path/securitySettings';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        security_settings: 'securitySettingsValue',
      };
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.securitySettingsPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.securitySettingsPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('securitySettingsPath', () => {
        const result = client.securitySettingsPath(
          'projectValue',
          'locationValue',
          'securitySettingsValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.securitySettingsPathTemplate
            .render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSecuritySettingsName', () => {
        const result = client.matchProjectFromSecuritySettingsName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.securitySettingsPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromSecuritySettingsName', () => {
        const result = client.matchLocationFromSecuritySettingsName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.securitySettingsPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSecuritySettingsFromSecuritySettingsName', () => {
        const result = client.matchSecuritySettingsFromSecuritySettingsName(
          fakePath
        );
        assert.strictEqual(result, 'securitySettingsValue');
        assert(
          (client.pathTemplates.securitySettingsPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('transitionRouteGroup', () => {
      const fakePath = '/rendered/path/transitionRouteGroup';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        agent: 'agentValue',
        flow: 'flowValue',
        transition_route_group: 'transitionRouteGroupValue',
      };
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.transitionRouteGroupPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.transitionRouteGroupPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('transitionRouteGroupPath', () => {
        const result = client.transitionRouteGroupPath(
          'projectValue',
          'locationValue',
          'agentValue',
          'flowValue',
          'transitionRouteGroupValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.transitionRouteGroupPathTemplate
            .render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTransitionRouteGroupName', () => {
        const result = client.matchProjectFromTransitionRouteGroupName(
          fakePath
        );
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.transitionRouteGroupPathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTransitionRouteGroupName', () => {
        const result = client.matchLocationFromTransitionRouteGroupName(
          fakePath
        );
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.transitionRouteGroupPathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAgentFromTransitionRouteGroupName', () => {
        const result = client.matchAgentFromTransitionRouteGroupName(fakePath);
        assert.strictEqual(result, 'agentValue');
        assert(
          (client.pathTemplates.transitionRouteGroupPathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFlowFromTransitionRouteGroupName', () => {
        const result = client.matchFlowFromTransitionRouteGroupName(fakePath);
        assert.strictEqual(result, 'flowValue');
        assert(
          (client.pathTemplates.transitionRouteGroupPathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTransitionRouteGroupFromTransitionRouteGroupName', () => {
        const result = client.matchTransitionRouteGroupFromTransitionRouteGroupName(
          fakePath
        );
        assert.strictEqual(result, 'transitionRouteGroupValue');
        assert(
          (client.pathTemplates.transitionRouteGroupPathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('version', () => {
      const fakePath = '/rendered/path/version';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        agent: 'agentValue',
        flow: 'flowValue',
        version: 'versionValue',
      };
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.versionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.versionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('versionPath', () => {
        const result = client.versionPath(
          'projectValue',
          'locationValue',
          'agentValue',
          'flowValue',
          'versionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.versionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromVersionName', () => {
        const result = client.matchProjectFromVersionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.versionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromVersionName', () => {
        const result = client.matchLocationFromVersionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.versionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAgentFromVersionName', () => {
        const result = client.matchAgentFromVersionName(fakePath);
        assert.strictEqual(result, 'agentValue');
        assert(
          (client.pathTemplates.versionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFlowFromVersionName', () => {
        const result = client.matchFlowFromVersionName(fakePath);
        assert.strictEqual(result, 'flowValue');
        assert(
          (client.pathTemplates.versionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchVersionFromVersionName', () => {
        const result = client.matchVersionFromVersionName(fakePath);
        assert.strictEqual(result, 'versionValue');
        assert(
          (client.pathTemplates.versionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('webhook', () => {
      const fakePath = '/rendered/path/webhook';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        agent: 'agentValue',
        webhook: 'webhookValue',
      };
      const client = new flowsModule.v3beta1.FlowsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.webhookPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.webhookPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('webhookPath', () => {
        const result = client.webhookPath(
          'projectValue',
          'locationValue',
          'agentValue',
          'webhookValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.webhookPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromWebhookName', () => {
        const result = client.matchProjectFromWebhookName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.webhookPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromWebhookName', () => {
        const result = client.matchLocationFromWebhookName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.webhookPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAgentFromWebhookName', () => {
        const result = client.matchAgentFromWebhookName(fakePath);
        assert.strictEqual(result, 'agentValue');
        assert(
          (client.pathTemplates.webhookPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchWebhookFromWebhookName', () => {
        const result = client.matchWebhookFromWebhookName(fakePath);
        assert.strictEqual(result, 'webhookValue');
        assert(
          (client.pathTemplates.webhookPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
