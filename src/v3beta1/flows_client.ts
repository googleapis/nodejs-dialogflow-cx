// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import {RequestType} from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import * as gapicConfig from './flows_client_config.json';
import {operationsProtos} from 'google-gax';
const version = require('../../../package.json').version;

/**
 *  Service for managing {@link google.cloud.dialogflow.cx.v3beta1.Flow|Flows}.
 * @class
 * @memberof v3beta1
 */
export class FlowsClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  flowsStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of FlowsClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - client configuration override.
   *     TODO(@alexander-fenster): link to gax documentation.
   * @param {boolean} fallback - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof FlowsClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? typeof window !== 'undefined';
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback
        ? // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      agentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}'
      ),
      entityTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/entityTypes/{entity_type}'
      ),
      environmentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/environments/{environment}'
      ),
      flowPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/flows/{flow}'
      ),
      intentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/intents/{intent}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      pagePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/flows/{flow}/pages/{page}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectLocationAgentEnvironmentSessionEntityTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/environments/{environment}/sessions/{session}/entityTypes/{entity_type}'
      ),
      projectLocationAgentSessionEntityTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/sessions/{session}/entityTypes/{entity_type}'
      ),
      transitionRouteGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/flows/{flow}/transitionRouteGroups/{transition_route_group}'
      ),
      versionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/flows/{flow}/versions/{version}'
      ),
      webhookPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/webhooks/{webhook}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listFlows: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'flows'
      ),
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback
      ? this._gaxModule.protobuf.Root.fromJSON(
          // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        )
      : this._gaxModule.protobuf.loadSync(nodejsProtoPath);

    this.operationsClient = this._gaxModule
      .lro({
        auth: this.auth,
        grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
      })
      .operationsClient(opts);
    const trainFlowResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const trainFlowMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Struct'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      trainFlow: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        trainFlowResponse.decode.bind(trainFlowResponse),
        trainFlowMetadata.decode.bind(trainFlowMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.dialogflow.cx.v3beta1.Flows',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.flowsStub) {
      return this.flowsStub;
    }

    // Put together the "service stub" for
    // google.cloud.dialogflow.cx.v3beta1.Flows.
    this.flowsStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.dialogflow.cx.v3beta1.Flows'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.dialogflow.cx.v3beta1.Flows,
      this._opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const flowsStubMethods = [
      'createFlow',
      'deleteFlow',
      'listFlows',
      'getFlow',
      'updateFlow',
      'trainFlow',
    ];
    for (const methodName of flowsStubMethods) {
      const callPromise = this.flowsStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.flowsStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'dialogflow.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'dialogflow.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/dialogflow',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.ICreateFlowRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
      protos.google.cloud.dialogflow.cx.v3beta1.ICreateFlowRequest | undefined,
      {} | undefined
    ]
  >;
  createFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.ICreateFlowRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
      | protos.google.cloud.dialogflow.cx.v3beta1.ICreateFlowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.ICreateFlowRequest,
    callback: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
      | protos.google.cloud.dialogflow.cx.v3beta1.ICreateFlowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Creates a flow in the specified agent.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The agent to create a flow for.
   *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   * @param {google.cloud.dialogflow.cx.v3beta1.Flow} request.flow
   *   Required. The flow to create.
   * @param {string} request.languageCode
   *   The language of the following fields in `flow`:
   *
   *   *  `Flow.event_handlers.trigger_fulfillment.messages`
   *   *  `Flow.transition_routes.trigger_fulfillment.messages`
   *
   *   If not specified, the agent's default language is used.
   *   [Many
   *   languages](https://cloud.google.com/dialogflow/docs/reference/language)
   *   are supported.
   *   Note: languages must be enabled in the agent before they can be used.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Flow]{@link google.cloud.dialogflow.cx.v3beta1.Flow}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.createFlow(request);
   */
  createFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.ICreateFlowRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
          | protos.google.cloud.dialogflow.cx.v3beta1.ICreateFlowRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
      | protos.google.cloud.dialogflow.cx.v3beta1.ICreateFlowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
      protos.google.cloud.dialogflow.cx.v3beta1.ICreateFlowRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createFlow(request, options, callback);
  }
  deleteFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IDeleteFlowRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.dialogflow.cx.v3beta1.IDeleteFlowRequest | undefined,
      {} | undefined
    ]
  >;
  deleteFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IDeleteFlowRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.dialogflow.cx.v3beta1.IDeleteFlowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IDeleteFlowRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.dialogflow.cx.v3beta1.IDeleteFlowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Deletes a specified flow.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the flow to delete.
   *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   *   ID>/flows/<Flow ID>`.
   * @param {boolean} request.force
   *   This field has no effect for flows with no incoming transitions.
   *   For flows with incoming transitions:
   *
   *   *  If `force` is set to false, an error will be returned with message
   *      indicating the incoming transitions.
   *   *  If `force` is set to true, Dialogflow will remove the flow, as well as
   *      any transitions to the flow (i.e. [Target
   *      flow][EventHandler.target_flow] in event handlers or [Target
   *      flow][TransitionRoute.target_flow] in transition routes that point to
   *      this flow will be cleared).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.deleteFlow(request);
   */
  deleteFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IDeleteFlowRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.dialogflow.cx.v3beta1.IDeleteFlowRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.dialogflow.cx.v3beta1.IDeleteFlowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.dialogflow.cx.v3beta1.IDeleteFlowRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteFlow(request, options, callback);
  }
  getFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IGetFlowRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
      protos.google.cloud.dialogflow.cx.v3beta1.IGetFlowRequest | undefined,
      {} | undefined
    ]
  >;
  getFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IGetFlowRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
      | protos.google.cloud.dialogflow.cx.v3beta1.IGetFlowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IGetFlowRequest,
    callback: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
      | protos.google.cloud.dialogflow.cx.v3beta1.IGetFlowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Retrieves the specified flow.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the flow to get.
   *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   *   ID>/flows/<Flow ID>`.
   * @param {string} request.languageCode
   *   The language to retrieve the flow for. The following fields are language
   *   dependent:
   *
   *   *  `Flow.event_handlers.trigger_fulfillment.messages`
   *   *  `Flow.transition_routes.trigger_fulfillment.messages`
   *
   *   If not specified, the agent's default language is used.
   *   [Many
   *   languages](https://cloud.google.com/dialogflow/docs/reference/language)
   *   are supported.
   *   Note: languages must be enabled in the agent before they can be used.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Flow]{@link google.cloud.dialogflow.cx.v3beta1.Flow}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.getFlow(request);
   */
  getFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IGetFlowRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
          | protos.google.cloud.dialogflow.cx.v3beta1.IGetFlowRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
      | protos.google.cloud.dialogflow.cx.v3beta1.IGetFlowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
      protos.google.cloud.dialogflow.cx.v3beta1.IGetFlowRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getFlow(request, options, callback);
  }
  updateFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IUpdateFlowRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
      protos.google.cloud.dialogflow.cx.v3beta1.IUpdateFlowRequest | undefined,
      {} | undefined
    ]
  >;
  updateFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IUpdateFlowRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
      | protos.google.cloud.dialogflow.cx.v3beta1.IUpdateFlowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IUpdateFlowRequest,
    callback: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
      | protos.google.cloud.dialogflow.cx.v3beta1.IUpdateFlowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Updates the specified flow.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.dialogflow.cx.v3beta1.Flow} request.flow
   *   Required. The flow to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The mask to control which fields get updated. If `update_mask` is not
   *   specified, an error will be returned.
   * @param {string} request.languageCode
   *   The language of the following fields in `flow`:
   *
   *   *  `Flow.event_handlers.trigger_fulfillment.messages`
   *   *  `Flow.transition_routes.trigger_fulfillment.messages`
   *
   *   If not specified, the agent's default language is used.
   *   [Many
   *   languages](https://cloud.google.com/dialogflow/docs/reference/language)
   *   are supported.
   *   Note: languages must be enabled in the agent before they can be used.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Flow]{@link google.cloud.dialogflow.cx.v3beta1.Flow}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.updateFlow(request);
   */
  updateFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IUpdateFlowRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
          | protos.google.cloud.dialogflow.cx.v3beta1.IUpdateFlowRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
      | protos.google.cloud.dialogflow.cx.v3beta1.IUpdateFlowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow,
      protos.google.cloud.dialogflow.cx.v3beta1.IUpdateFlowRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'flow.name': request.flow!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateFlow(request, options, callback);
  }

  trainFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.ITrainFlowRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IStruct
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  trainFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.ITrainFlowRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IStruct
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  trainFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.ITrainFlowRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IStruct
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Trains the specified flow. Note that only the flow in 'draft' environment
   * is trained.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The flow to train.
   *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   *   ID>/flows/<Flow ID>`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example
   * const [operation] = await client.trainFlow(request);
   * const [response] = await operation.promise();
   */
  trainFlow(
    request: protos.google.cloud.dialogflow.cx.v3beta1.ITrainFlowRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.protobuf.IStruct
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IStruct
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.protobuf.IStruct
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.trainFlow(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `trainFlow()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example
   * const decodedOperation = await checkTrainFlowProgress(name);
   * console.log(decodedOperation.result);
   * console.log(decodedOperation.done);
   * console.log(decodedOperation.metadata);
   */
  async checkTrainFlowProgress(
    name: string
  ): Promise<
    LROperation<protos.google.protobuf.Empty, protos.google.protobuf.Struct>
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.trainFlow,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.protobuf.Struct
    >;
  }
  listFlows(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow[],
      protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsRequest | null,
      protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsResponse
    ]
  >;
  listFlows(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsRequest,
      | protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsResponse
      | null
      | undefined,
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow
    >
  ): void;
  listFlows(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsRequest,
    callback: PaginationCallback<
      protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsRequest,
      | protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsResponse
      | null
      | undefined,
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow
    >
  ): void;
  /**
   * Returns the list of all flows in the specified agent.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The agent containing the flows.
   *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   * @param {number} request.pageSize
   *   The maximum number of items to return in a single page. By default 100 and
   *   at most 1000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request.
   * @param {string} request.languageCode
   *   The language to list flows for. The following fields are language
   *   dependent:
   *
   *   *  `Flow.event_handlers.trigger_fulfillment.messages`
   *   *  `Flow.transition_routes.trigger_fulfillment.messages`
   *
   *   If not specified, the agent's default language is used.
   *   [Many
   *   languages](https://cloud.google.com/dialogflow/docs/reference/language)
   *   are supported.
   *   Note: languages must be enabled in the agent before they can be used.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Flow]{@link google.cloud.dialogflow.cx.v3beta1.Flow}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listFlowsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listFlows(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsRequest,
          | protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsResponse
          | null
          | undefined,
          protos.google.cloud.dialogflow.cx.v3beta1.IFlow
        >,
    callback?: PaginationCallback<
      protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsRequest,
      | protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsResponse
      | null
      | undefined,
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow
    >
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IFlow[],
      protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsRequest | null,
      protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listFlows(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The agent containing the flows.
   *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   * @param {number} request.pageSize
   *   The maximum number of items to return in a single page. By default 100 and
   *   at most 1000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request.
   * @param {string} request.languageCode
   *   The language to list flows for. The following fields are language
   *   dependent:
   *
   *   *  `Flow.event_handlers.trigger_fulfillment.messages`
   *   *  `Flow.transition_routes.trigger_fulfillment.messages`
   *
   *   If not specified, the agent's default language is used.
   *   [Many
   *   languages](https://cloud.google.com/dialogflow/docs/reference/language)
   *   are supported.
   *   Note: languages must be enabled in the agent before they can be used.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Flow]{@link google.cloud.dialogflow.cx.v3beta1.Flow} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listFlowsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listFlowsStream(
    request?: protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listFlows.createStream(
      this.innerApiCalls.listFlows as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listFlows`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The agent containing the flows.
   *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   * @param {number} request.pageSize
   *   The maximum number of items to return in a single page. By default 100 and
   *   at most 1000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request.
   * @param {string} request.languageCode
   *   The language to list flows for. The following fields are language
   *   dependent:
   *
   *   *  `Flow.event_handlers.trigger_fulfillment.messages`
   *   *  `Flow.transition_routes.trigger_fulfillment.messages`
   *
   *   If not specified, the agent's default language is used.
   *   [Many
   *   languages](https://cloud.google.com/dialogflow/docs/reference/language)
   *   are supported.
   *   Note: languages must be enabled in the agent before they can be used.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Flow]{@link google.cloud.dialogflow.cx.v3beta1.Flow}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * const iterable = client.listFlowsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   */
  listFlowsAsync(
    request?: protos.google.cloud.dialogflow.cx.v3beta1.IListFlowsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.cloud.dialogflow.cx.v3beta1.IFlow> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listFlows.asyncIterate(
      this.innerApiCalls['listFlows'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.dialogflow.cx.v3beta1.IFlow>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified agent resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @returns {string} Resource name string.
   */
  agentPath(project: string, location: string, agent: string) {
    return this.pathTemplates.agentPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
    });
  }

  /**
   * Parse the project from Agent resource.
   *
   * @param {string} agentName
   *   A fully-qualified path representing Agent resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAgentName(agentName: string) {
    return this.pathTemplates.agentPathTemplate.match(agentName).project;
  }

  /**
   * Parse the location from Agent resource.
   *
   * @param {string} agentName
   *   A fully-qualified path representing Agent resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAgentName(agentName: string) {
    return this.pathTemplates.agentPathTemplate.match(agentName).location;
  }

  /**
   * Parse the agent from Agent resource.
   *
   * @param {string} agentName
   *   A fully-qualified path representing Agent resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromAgentName(agentName: string) {
    return this.pathTemplates.agentPathTemplate.match(agentName).agent;
  }

  /**
   * Return a fully-qualified entityType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} entity_type
   * @returns {string} Resource name string.
   */
  entityTypePath(
    project: string,
    location: string,
    agent: string,
    entityType: string
  ) {
    return this.pathTemplates.entityTypePathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      entity_type: entityType,
    });
  }

  /**
   * Parse the project from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .project;
  }

  /**
   * Parse the location from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .location;
  }

  /**
   * Parse the agent from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .agent;
  }

  /**
   * Parse the entity_type from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the entity_type.
   */
  matchEntityTypeFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .entity_type;
  }

  /**
   * Return a fully-qualified environment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} environment
   * @returns {string} Resource name string.
   */
  environmentPath(
    project: string,
    location: string,
    agent: string,
    environment: string
  ) {
    return this.pathTemplates.environmentPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      environment: environment,
    });
  }

  /**
   * Parse the project from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .project;
  }

  /**
   * Parse the location from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .location;
  }

  /**
   * Parse the agent from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .agent;
  }

  /**
   * Parse the environment from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the environment.
   */
  matchEnvironmentFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .environment;
  }

  /**
   * Return a fully-qualified flow resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} flow
   * @returns {string} Resource name string.
   */
  flowPath(project: string, location: string, agent: string, flow: string) {
    return this.pathTemplates.flowPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      flow: flow,
    });
  }

  /**
   * Parse the project from Flow resource.
   *
   * @param {string} flowName
   *   A fully-qualified path representing Flow resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFlowName(flowName: string) {
    return this.pathTemplates.flowPathTemplate.match(flowName).project;
  }

  /**
   * Parse the location from Flow resource.
   *
   * @param {string} flowName
   *   A fully-qualified path representing Flow resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFlowName(flowName: string) {
    return this.pathTemplates.flowPathTemplate.match(flowName).location;
  }

  /**
   * Parse the agent from Flow resource.
   *
   * @param {string} flowName
   *   A fully-qualified path representing Flow resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromFlowName(flowName: string) {
    return this.pathTemplates.flowPathTemplate.match(flowName).agent;
  }

  /**
   * Parse the flow from Flow resource.
   *
   * @param {string} flowName
   *   A fully-qualified path representing Flow resource.
   * @returns {string} A string representing the flow.
   */
  matchFlowFromFlowName(flowName: string) {
    return this.pathTemplates.flowPathTemplate.match(flowName).flow;
  }

  /**
   * Return a fully-qualified intent resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} intent
   * @returns {string} Resource name string.
   */
  intentPath(project: string, location: string, agent: string, intent: string) {
    return this.pathTemplates.intentPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      intent: intent,
    });
  }

  /**
   * Parse the project from Intent resource.
   *
   * @param {string} intentName
   *   A fully-qualified path representing Intent resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromIntentName(intentName: string) {
    return this.pathTemplates.intentPathTemplate.match(intentName).project;
  }

  /**
   * Parse the location from Intent resource.
   *
   * @param {string} intentName
   *   A fully-qualified path representing Intent resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromIntentName(intentName: string) {
    return this.pathTemplates.intentPathTemplate.match(intentName).location;
  }

  /**
   * Parse the agent from Intent resource.
   *
   * @param {string} intentName
   *   A fully-qualified path representing Intent resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromIntentName(intentName: string) {
    return this.pathTemplates.intentPathTemplate.match(intentName).agent;
  }

  /**
   * Parse the intent from Intent resource.
   *
   * @param {string} intentName
   *   A fully-qualified path representing Intent resource.
   * @returns {string} A string representing the intent.
   */
  matchIntentFromIntentName(intentName: string) {
    return this.pathTemplates.intentPathTemplate.match(intentName).intent;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified page resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} flow
   * @param {string} page
   * @returns {string} Resource name string.
   */
  pagePath(
    project: string,
    location: string,
    agent: string,
    flow: string,
    page: string
  ) {
    return this.pathTemplates.pagePathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      flow: flow,
      page: page,
    });
  }

  /**
   * Parse the project from Page resource.
   *
   * @param {string} pageName
   *   A fully-qualified path representing Page resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPageName(pageName: string) {
    return this.pathTemplates.pagePathTemplate.match(pageName).project;
  }

  /**
   * Parse the location from Page resource.
   *
   * @param {string} pageName
   *   A fully-qualified path representing Page resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPageName(pageName: string) {
    return this.pathTemplates.pagePathTemplate.match(pageName).location;
  }

  /**
   * Parse the agent from Page resource.
   *
   * @param {string} pageName
   *   A fully-qualified path representing Page resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromPageName(pageName: string) {
    return this.pathTemplates.pagePathTemplate.match(pageName).agent;
  }

  /**
   * Parse the flow from Page resource.
   *
   * @param {string} pageName
   *   A fully-qualified path representing Page resource.
   * @returns {string} A string representing the flow.
   */
  matchFlowFromPageName(pageName: string) {
    return this.pathTemplates.pagePathTemplate.match(pageName).flow;
  }

  /**
   * Parse the page from Page resource.
   *
   * @param {string} pageName
   *   A fully-qualified path representing Page resource.
   * @returns {string} A string representing the page.
   */
  matchPageFromPageName(pageName: string) {
    return this.pathTemplates.pagePathTemplate.match(pageName).page;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectLocationAgentEnvironmentSessionEntityType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} environment
   * @param {string} session
   * @param {string} entity_type
   * @returns {string} Resource name string.
   */
  projectLocationAgentEnvironmentSessionEntityTypePath(
    project: string,
    location: string,
    agent: string,
    environment: string,
    session: string,
    entityType: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.render(
      {
        project: project,
        location: location,
        agent: agent,
        environment: environment,
        session: session,
        entity_type: entityType,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationAgentEnvironmentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationAgentEnvironmentSessionEntityTypeName(
    projectLocationAgentEnvironmentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(
      projectLocationAgentEnvironmentSessionEntityTypeName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationAgentEnvironmentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationAgentEnvironmentSessionEntityTypeName(
    projectLocationAgentEnvironmentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(
      projectLocationAgentEnvironmentSessionEntityTypeName
    ).location;
  }

  /**
   * Parse the agent from ProjectLocationAgentEnvironmentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromProjectLocationAgentEnvironmentSessionEntityTypeName(
    projectLocationAgentEnvironmentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(
      projectLocationAgentEnvironmentSessionEntityTypeName
    ).agent;
  }

  /**
   * Parse the environment from ProjectLocationAgentEnvironmentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
   * @returns {string} A string representing the environment.
   */
  matchEnvironmentFromProjectLocationAgentEnvironmentSessionEntityTypeName(
    projectLocationAgentEnvironmentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(
      projectLocationAgentEnvironmentSessionEntityTypeName
    ).environment;
  }

  /**
   * Parse the session from ProjectLocationAgentEnvironmentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromProjectLocationAgentEnvironmentSessionEntityTypeName(
    projectLocationAgentEnvironmentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(
      projectLocationAgentEnvironmentSessionEntityTypeName
    ).session;
  }

  /**
   * Parse the entity_type from ProjectLocationAgentEnvironmentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
   * @returns {string} A string representing the entity_type.
   */
  matchEntityTypeFromProjectLocationAgentEnvironmentSessionEntityTypeName(
    projectLocationAgentEnvironmentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(
      projectLocationAgentEnvironmentSessionEntityTypeName
    ).entity_type;
  }

  /**
   * Return a fully-qualified projectLocationAgentSessionEntityType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} session
   * @param {string} entity_type
   * @returns {string} Resource name string.
   */
  projectLocationAgentSessionEntityTypePath(
    project: string,
    location: string,
    agent: string,
    session: string,
    entityType: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.render(
      {
        project: project,
        location: location,
        agent: agent,
        session: session,
        entity_type: entityType,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationAgentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_session_entity_type resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationAgentSessionEntityTypeName(
    projectLocationAgentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(
      projectLocationAgentSessionEntityTypeName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationAgentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_session_entity_type resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationAgentSessionEntityTypeName(
    projectLocationAgentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(
      projectLocationAgentSessionEntityTypeName
    ).location;
  }

  /**
   * Parse the agent from ProjectLocationAgentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_session_entity_type resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromProjectLocationAgentSessionEntityTypeName(
    projectLocationAgentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(
      projectLocationAgentSessionEntityTypeName
    ).agent;
  }

  /**
   * Parse the session from ProjectLocationAgentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_session_entity_type resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromProjectLocationAgentSessionEntityTypeName(
    projectLocationAgentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(
      projectLocationAgentSessionEntityTypeName
    ).session;
  }

  /**
   * Parse the entity_type from ProjectLocationAgentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_session_entity_type resource.
   * @returns {string} A string representing the entity_type.
   */
  matchEntityTypeFromProjectLocationAgentSessionEntityTypeName(
    projectLocationAgentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(
      projectLocationAgentSessionEntityTypeName
    ).entity_type;
  }

  /**
   * Return a fully-qualified transitionRouteGroup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} flow
   * @param {string} transition_route_group
   * @returns {string} Resource name string.
   */
  transitionRouteGroupPath(
    project: string,
    location: string,
    agent: string,
    flow: string,
    transitionRouteGroup: string
  ) {
    return this.pathTemplates.transitionRouteGroupPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      flow: flow,
      transition_route_group: transitionRouteGroup,
    });
  }

  /**
   * Parse the project from TransitionRouteGroup resource.
   *
   * @param {string} transitionRouteGroupName
   *   A fully-qualified path representing TransitionRouteGroup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTransitionRouteGroupName(transitionRouteGroupName: string) {
    return this.pathTemplates.transitionRouteGroupPathTemplate.match(
      transitionRouteGroupName
    ).project;
  }

  /**
   * Parse the location from TransitionRouteGroup resource.
   *
   * @param {string} transitionRouteGroupName
   *   A fully-qualified path representing TransitionRouteGroup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTransitionRouteGroupName(transitionRouteGroupName: string) {
    return this.pathTemplates.transitionRouteGroupPathTemplate.match(
      transitionRouteGroupName
    ).location;
  }

  /**
   * Parse the agent from TransitionRouteGroup resource.
   *
   * @param {string} transitionRouteGroupName
   *   A fully-qualified path representing TransitionRouteGroup resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromTransitionRouteGroupName(transitionRouteGroupName: string) {
    return this.pathTemplates.transitionRouteGroupPathTemplate.match(
      transitionRouteGroupName
    ).agent;
  }

  /**
   * Parse the flow from TransitionRouteGroup resource.
   *
   * @param {string} transitionRouteGroupName
   *   A fully-qualified path representing TransitionRouteGroup resource.
   * @returns {string} A string representing the flow.
   */
  matchFlowFromTransitionRouteGroupName(transitionRouteGroupName: string) {
    return this.pathTemplates.transitionRouteGroupPathTemplate.match(
      transitionRouteGroupName
    ).flow;
  }

  /**
   * Parse the transition_route_group from TransitionRouteGroup resource.
   *
   * @param {string} transitionRouteGroupName
   *   A fully-qualified path representing TransitionRouteGroup resource.
   * @returns {string} A string representing the transition_route_group.
   */
  matchTransitionRouteGroupFromTransitionRouteGroupName(
    transitionRouteGroupName: string
  ) {
    return this.pathTemplates.transitionRouteGroupPathTemplate.match(
      transitionRouteGroupName
    ).transition_route_group;
  }

  /**
   * Return a fully-qualified version resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} flow
   * @param {string} version
   * @returns {string} Resource name string.
   */
  versionPath(
    project: string,
    location: string,
    agent: string,
    flow: string,
    version: string
  ) {
    return this.pathTemplates.versionPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      flow: flow,
      version: version,
    });
  }

  /**
   * Parse the project from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).project;
  }

  /**
   * Parse the location from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).location;
  }

  /**
   * Parse the agent from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).agent;
  }

  /**
   * Parse the flow from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the flow.
   */
  matchFlowFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).flow;
  }

  /**
   * Parse the version from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).version;
  }

  /**
   * Return a fully-qualified webhook resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} webhook
   * @returns {string} Resource name string.
   */
  webhookPath(
    project: string,
    location: string,
    agent: string,
    webhook: string
  ) {
    return this.pathTemplates.webhookPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      webhook: webhook,
    });
  }

  /**
   * Parse the project from Webhook resource.
   *
   * @param {string} webhookName
   *   A fully-qualified path representing Webhook resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromWebhookName(webhookName: string) {
    return this.pathTemplates.webhookPathTemplate.match(webhookName).project;
  }

  /**
   * Parse the location from Webhook resource.
   *
   * @param {string} webhookName
   *   A fully-qualified path representing Webhook resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromWebhookName(webhookName: string) {
    return this.pathTemplates.webhookPathTemplate.match(webhookName).location;
  }

  /**
   * Parse the agent from Webhook resource.
   *
   * @param {string} webhookName
   *   A fully-qualified path representing Webhook resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromWebhookName(webhookName: string) {
    return this.pathTemplates.webhookPathTemplate.match(webhookName).agent;
  }

  /**
   * Parse the webhook from Webhook resource.
   *
   * @param {string} webhookName
   *   A fully-qualified path representing Webhook resource.
   * @returns {string} A string representing the webhook.
   */
  matchWebhookFromWebhookName(webhookName: string) {
    return this.pathTemplates.webhookPathTemplate.match(webhookName).webhook;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.flowsStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
